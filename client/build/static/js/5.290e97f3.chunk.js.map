{"version":3,"sources":["questions/pages/QuestionAdmin.js"],"names":["QuestionAdmin","useState","newQuestion","setNewQuestion","useForm","values","handleChange","useHttpClient","isLoading","error","sendRequest","history","useHistory","authSubmitHndler","e","a","preventDefault","url","process","body","index","question","answer","role","request","method","JSON","stringify","headers","createQuestion","push","console","log","src","LoadingGif","alt","ErrorGif","onSubmit","type","name","placeholder","value","onChange","className","autoFocus","validators","VALIDATOR_EMAIL","validator","VALIDATOR_MINLENGTH"],"mappings":"oSAqFeA,UAtEO,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACnBC,EADmB,KACNC,EADM,OAEKC,cAFL,mBAEnBC,EAFmB,KAEXC,EAFW,OAIgBC,cAAlCC,EAJkB,EAIlBA,UAAWC,EAJO,EAIPA,MAAOC,EAJA,EAIAA,YAEpBC,EAAUC,cAEVC,EAAgB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACvBD,EAAEE,iBAEIC,EAHiB,UAGRC,qCAHQ,gBAKjBC,EAAO,CACXC,MAAOf,EAAOe,MACdC,SAAUhB,EAAOgB,SACjBC,OAAQjB,EAAOiB,OACfC,KAAMlB,EAAOkB,MAGTC,EAAU,CACdC,OAAQ,OACRN,KAAMO,KAAKC,UAAUR,GACrBS,QAAS,CAAE,eAAgB,qBAfN,kBAqBElB,EACrBO,EACAO,EAAQC,OACRD,EAAQL,KACRK,EAAQI,SAzBW,OAqBrBC,EArBqB,OA4BrBlB,EAAQmB,KAAK,gBACb3B,EAAe0B,GA7BM,kDA+BrBE,QAAQC,IAAI,oBAAZ,MA/BqB,0DAAH,sDAoCtB,OAFAD,QAAQC,IAAI9B,GAGV,kBAAC,WAAD,KACGM,GAAa,yBAAKyB,IAAKC,IAAYC,IAAI,YACvC1B,GAAS,yBAAKwB,IAAKG,IAAUD,IAAI,WAChC3B,IAAcC,GACd,kBAAC,WAAD,KACE,kBAAC,IAAD,KAAQ,yDACR,iCACE,kBAAC,IAAD,MACA,yEACA,0BAAM4B,SAAUxB,GACd,2BAAOyB,KAAK,SAASC,KAAK,QAAQC,YAAY,UAAUC,MAAOpC,EAAOe,OAAS,GAAIsB,SAAUpC,EAAcqC,UAAU,YAAYC,WAAS,IAC1I,2BAAON,KAAK,OAAOC,KAAK,WAAWC,YAAY,WAAWC,MAAOpC,EAAOgB,UAAY,GAAIqB,SAAUpC,EAAcqC,UAAU,YAAYE,WAAY,CAACC,iBACnJ,2BAAOR,KAAK,OAAOC,KAAK,SAASC,YAAY,SAASC,MAAOpC,EAAOiB,QAAU,GAAIoB,SAAUpC,EAAcqC,UAAU,YAAYI,UAAW,CAACC,YAAoB,MAChK,2BAAOV,KAAK,OAAOC,KAAK,OAAOC,YAAY,QAAQC,MAAOpC,EAAOkB,MAAQ,GAAImB,SAAUpC,EAAcqC,UAAU,YAAYI,UAAW,CAACC,YAAoB,MAC3J,yBAAKL,UAAU,wBACb,4BAAQL,KAAK,SAASK,UAAU,kBAAhC","file":"static/js/5.290e97f3.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useHistory } from 'react-router-dom';\nimport useForm from '../../hooks/form-hook';\nimport useHttpClient from '../../hooks/http-hook';\nimport './QuestionsPage.css';\nimport LogoutBtn from './../components/LogoutBtn';\nimport LoadingGif from '../../images/giphy/loading.gif';\nimport ErrorGif from '../../images/giphy/error.gif';\n\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_EMAIL,\n} from '../../shared/validarors';\n\nconst QuestionAdmin = () => {\n  const [newQuestion, setNewQuestion] = useState({});\n  const [values, handleChange] = useForm();\n\n  const { isLoading, error, sendRequest } = useHttpClient();\n\n  const history = useHistory();\n\n  const authSubmitHndler = async (e) => {\n    e.preventDefault();\n\n    const url = `${process.env.REACT_APP_BACKEND_URL}/addQuestion`;\n\n    const body = {\n      index: values.index,\n      question: values.question,\n      answer: values.answer,\n      role: values.role,\n    };\n\n    const request = {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      headers: { \"Content-Type\": \"application/json\" },\n    };\n\n    let createQuestion;\n\n    try {\n      createQuestion = await sendRequest(\n        url,\n        request.method,\n        request.body,\n        request.headers\n      );\n\n      history.push('/newQuestion');\n      setNewQuestion(createQuestion);\n    } catch (err) {\n      console.log(\"can't create user\", err);\n    }\n  };\n  console.log(newQuestion);\n\n  return (\n    <Fragment>\n      {isLoading && <img src={LoadingGif} alt=\"Loading\" />}\n      {error && <img src={ErrorGif} alt=\"Error\" />}\n      {!isLoading && !error && (\n        <Fragment>\n          <Helmet><title>Math-Quiz App - Admin</title></Helmet>\n          <section>\n            <LogoutBtn />\n            <h1>Hello Admin! this is add Question page :)</h1>\n            <form onSubmit={authSubmitHndler}>\n              <input type=\"number\" name='index' placeholder='QNumber' value={values.index || ''} onChange={handleChange} className='inputForm' autoFocus />\n              <input type=\"text\" name='question' placeholder='Question' value={values.question || ''} onChange={handleChange} className='inputForm' validators={[VALIDATOR_EMAIL()]} />\n              <input type=\"text\" name='answer' placeholder='Answer' value={values.answer || ''} onChange={handleChange} className='inputForm' validator={[VALIDATOR_MINLENGTH(6)]} />\n              <input type=\"text\" name='role' placeholder='Level' value={values.role || ''} onChange={handleChange} className='inputForm' validator={[VALIDATOR_MINLENGTH(6)]} />\n              <div className='signup-btn-container'>\n                <button type='submit' className='signup-btn btn'>Add Question</button>\n              </div>\n            </form>\n          </section>\n        </Fragment>)}\n    </Fragment >\n\n  );\n\n};\nexport default QuestionAdmin;\n"],"sourceRoot":""}